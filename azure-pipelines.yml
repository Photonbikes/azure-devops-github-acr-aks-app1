trigger:
  branches:
    include:
      - main

variables:
  imageName: 'new'
  acrLoginServer: 'gurudevopsacr.azurecr.io'
  acrServiceConnection: 'gurudevopsacr-2061'
  kubernetesServiceConnection: 'demo3-k8s-dev-ns'
  namespace: 'dev'
  imageTag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: 'Build and Push Image'
  jobs:
  - job: BuildAndPush
    displayName: 'Build & Push to ACR'
    pool:
      name: pipelineagent
    steps:
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        containerRegistry: '$(acrServiceConnection)'
        repository: '$(imageName)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(imageTag)

- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn: Build
  jobs:
  - deployment: DeployToAKS
    displayName: 'Deploy Kubernetes Resources'
    environment: 'dev-aks'  # You'll need to create this environment in Azure DevOps
    pool:
      name: pipelineagent
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@1
            displayName: 'Create ACR Pull Secret'
            inputs:
              action: createSecret
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(namespace)'
              secretName: 'dev-acr'
              dockerRegistryEndpoint: '$(acrServiceConnection)'
            continueOnError: true

          - task: KubernetesManifest@1
            displayName: 'Deploy Deployment YAML'
            inputs:
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(namespace)'
              manifests: 'manifests/deployment.yml'
              containers: '$(acrLoginServer)/$(imageName):$(imageTag)'
              imagePullSecrets: 'dev-acr'
            continueOnError: true

          - task: KubernetesManifest@1
            displayName: 'Deploy Service YAML'
            inputs:
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(namespace)'
              manifests: 'manifests/service.yml'
              containers: '$(acrLoginServer)/$(imageName):$(imageTag)'
              imagePullSecrets: 'dev-acr'
            continueOnError: true

